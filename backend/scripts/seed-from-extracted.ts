import { PrismaClient } from "@prisma/client";
import * as fs from "fs";
import * as path from "path";

const prisma = new PrismaClient();

// Read the extracted content
const extractedContentPath = path.join(__dirname, "extracted-content.json");
const extractedContent = JSON.parse(
  fs.readFileSync(extractedContentPath, "utf8")
);

// Define categories based on the actual content
const categories = [
  {
    name: "рдордВрдЧрд▓рд╛рдЪрд░рдг",
    description: "рдордВрдЧрд▓рд╛рдЪрд░рдг рдФрд░ рд╢реБрднрд╛рд░рдВрдн",
    color: "#10B981",
    icon: "ЁЯХЙя╕П",
  },
  {
    name: "рдирд╛рдо рдорд╣рд┐рдорд╛",
    description: "рд░рд╛рдзрд╛рд╕реНрд╡рд╛рдореА рдирд╛рдо рдХреА рдорд╣рд┐рдорд╛ рдФрд░ рдЧреБрдг",
    color: "#F59E0B",
    icon: "ЁЯЩП",
  },
  {
    name: "рдЧреБрд░реБ рдорд╣рд┐рдорд╛",
    description: "рд╕рддрдЧреБрд░реБ рдХреА рдорд╣рд┐рдорд╛ рдФрд░ рд╢рд┐рдХреНрд╖рд╛",
    color: "#3B82F6",
    icon: "ЁЯСд",
  },
  {
    name: "рд╕рддреНрд╕рдВрдЧ",
    description: "рд╕рддреНрд╕рдВрдЧ рдФрд░ рд╕рд╛рдзреБ рд╕рдВрдЧрддрд┐",
    color: "#8B5CF6",
    icon: "ЁЯСе",
  },
  {
    name: "рд╢рдмреНрдж рдЕрднреНрдпрд╛рд╕",
    description: "рд╢рдмреНрдж рд╕реБрд░рдд рдпреЛрдЧ рдФрд░ рдЕрднреНрдпрд╛рд╕",
    color: "#EF4444",
    icon: "ЁЯУ┐",
  },
  {
    name: "рднрдХреНрддрд┐",
    description: "рднрдХреНрддрд┐, рдкреНрд░реЗрдо рдФрд░ рднрдЬрди",
    color: "#06B6D4",
    icon: "тЭдя╕П",
  },
  {
    name: "рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд▓реЛрдХ",
    description: "рдзрд╛рдо, рд▓реЛрдХ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╕реНрдерд╛рдиреЛрдВ рдХрд╛ рд╡рд░реНрдгрди",
    color: "#84CC16",
    icon: "ЁЯПЫя╕П",
  },
  {
    name: "рдЖрддреНрдорд╛ рд╡рд┐рдЬреНрдЮрд╛рди",
    description: "рдЬреАрд╡, рдЖрддреНрдорд╛ рдФрд░ рдЖрддреНрдорд┐рдХ рдЬреНрдЮрд╛рди",
    color: "#F97316",
    icon: "тЬи",
  },
  {
    name: "рдХрд░реНрдо рд╕рд┐рджреНрдзрд╛рдВрдд",
    description: "рдХрд░реНрдо, рдХрд╛рд▓ рдФрд░ рдХрд░реНрдо рдХрд╛ рд╕рд┐рджреНрдзрд╛рдВрдд",
    color: "#6366F1",
    icon: "тЪЦя╕П",
  },
  {
    name: "рдкреНрд░рд╛рд░реНрдердирд╛",
    description: "рдкреНрд░рд╛рд░реНрдердирд╛, рдмрдВрджрдЧреА рдФрд░ рджреБрдЖ",
    color: "#EC4899",
    icon: "ЁЯЩП",
  },
  {
    name: "рд╕рд╛рдорд╛рдиреНрдп рд╢рд┐рдХреНрд╖рд╛",
    description: "рд╕рд╛рдорд╛рдиреНрдп рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╢рд┐рдХреНрд╖рд╛ рдФрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди",
    color: "#6B7280",
    icon: "ЁЯУЪ",
  },
];

// Sample notifications for RSSB
const notifications = [
  {
    title: "Daily Spiritual Reminder",
    message:
      "Remember to do your daily meditation and simran practice with devotion and love.",
    type: "spiritual",
  },
  {
    title: "Satsang Schedule",
    message:
      "Weekly satsang will be held on Sunday at 6 PM. All seekers are welcome to join.",
    type: "announcement",
  },
  {
    title: "Meditation Practice",
    message:
      "Consistency in daily practice is key to spiritual progress. Set aside time each day for meditation.",
    type: "reminder",
  },
  {
    title: "Master's Teachings",
    message:
      "Study the teachings of the great Masters regularly to deepen your understanding of the path.",
    type: "spiritual",
  },
  {
    title: "Service Opportunity",
    message:
      "Voluntary service (seva) opportunities are available. Contact the local center for details.",
    type: "info",
  },
];

async function main() {
  try {
    console.log("ЁЯМ▒ Starting database seeding with extracted content...");

    // Clear existing data
    await prisma.notification.deleteMany();
    await prisma.content.deleteMany();
    await prisma.category.deleteMany();

    console.log("ЁЯЧСя╕П Cleared existing data");

    // Seed categories
    console.log("ЁЯУВ Seeding categories...");
    for (const category of categories) {
      await prisma.category.create({
        data: category,
      });
    }

    // Seed content from extracted data
    console.log("ЁЯУЪ Seeding spiritual content from extracted data...");

    // Process content in batches to avoid memory issues
    const batchSize = 100;
    let processedCount = 0;

    for (let i = 0; i < extractedContent.length; i += batchSize) {
      const batch = extractedContent.slice(i, i + batchSize);

      for (const item of batch) {
        try {
          await prisma.content.create({
            data: {
              title: item.title || "Untitled",
              description: item.description || "",
              category: item.category || "рд╕рд╛рдорд╛рдиреНрдп рд╢рд┐рдХреНрд╖рд╛",
              tags: item.tags || [],
            },
          });
          processedCount++;

          // Log progress every 100 items
          if (processedCount % 100 === 0) {
            console.log(`   ЁЯУЦ Processed ${processedCount} content items...`);
          }
        } catch (error) {
          console.error(
            `тЭМ Error processing item ${processedCount + 1}:`,
            error
          );
          // Continue with next item instead of failing completely
        }
      }
    }

    // Seed notifications
    console.log("ЁЯФФ Seeding notifications...");
    for (const notification of notifications) {
      await prisma.notification.create({
        data: notification,
      });
    }

    console.log("тЬЕ Database seeding completed successfully!");
    console.log(`ЁЯУК Final results:`);

    // Get final counts
    const [contentCount, categoryCount, notificationCount] = await Promise.all([
      prisma.content.count(),
      prisma.category.count(),
      prisma.notification.count(),
    ]);

    console.log(`   - ${categoryCount} categories`);
    console.log(`   - ${contentCount} content items`);
    console.log(`   - ${notificationCount} notifications`);

    // Show category breakdown
    const categoryBreakdown = await prisma.content.groupBy({
      by: ["category"],
      _count: { category: true },
      orderBy: { _count: { category: "desc" } },
    });

    console.log(`\nЁЯУИ Content by category:`);
    categoryBreakdown.forEach((item) => {
      console.log(`   - ${item.category}: ${item._count.category} items`);
    });
  } catch (error) {
    console.error("тЭМ Error seeding database:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
